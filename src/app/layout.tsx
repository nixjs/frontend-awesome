import "styled/index.scss";

import React from "react";
import Head from "next/head";
import { Interfaces } from "@nixjs23n6/types";
import {
  loadCreds,
  loadCategory,
  loadCategoryReactSheet,
  loadCategoryTypescriptSheet,
  loadSheets,
} from "utils/googleSheets";
import { MenuProps } from "components/Menu";
import { ReactSheets, CategorySheets } from "types/googleSheets";
import Header from "components/header";
import Sidebar from "components/sidebar";
import Footer from "components/footer";
import StyledSheet from "./stylesheets";

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function loadGoogleSheet(): Promise<
  Interfaces.ResponseData<MenuProps.Navigation[]>
> {
  try {
    const doc = loadSheets();
    await doc.useServiceAccountAuth(loadCreds());
    await doc.loadInfo();

    const categories = await loadCategory(doc);
    const reacts = await loadCategoryReactSheet(doc);
    const typescripts = await loadCategoryTypescriptSheet(doc);
    const data = categories.map(({ id, name, slug }) => {
      let childs: (ReactSheets | CategorySheets)[] = [];
      if (reacts.length > 0 && id === reacts[0].category) {
        childs = reacts;
      } else if (typescripts.length > 0 && id === typescripts[0].category) {
        childs = typescripts;
      }
      return {
        title: name,
        icon: { kind: "default" },
        path:
          childs.length > 0
            ? undefined
            : {
                href: `/${slug}`,
              },
        children: childs.map((c) => ({
          title: c.name,
          icon: { kind: "font", source: "ic ic_icon" },
          path: {
            href: `/${slug}/${c.slug}`,
          },
        })),
      };
    }) as MenuProps.Navigation[];
    return {
      status: "SUCCESS",
      data,
    };
  } catch (error) {
    //   log any errors to the console
    return {
      status: "ERROR",
      error: "Failed to load data",
    };
  }
}

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const response = await loadGoogleSheet();
  return (
    <html lang="en">
      <head>
        <StyledSheet />
      </head>
      <body>
        <Header />
        <div className="container">
          <div className="d-flex justify-content-between page-content">
            <Sidebar
              data={
                response.status === "SUCCESS" && response.data
                  ? response.data
                  : []
              }
            />
            {children}
          </div>
        </div>
        <Footer />
      </body>
    </html>
  );
}
